# -*- coding: utf-8 -*-
"""Copy of ArraysAndStrings.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VTh-TFOWmq3uxbCvBrDfUnb6Zj5IGlG_

# Arrays and Strings
16Bits = 2Bytes

8Bit, 16Bit, 32Bit, 64Bit, 128Bit
```
[123, "hello" ]
A = ["Hello", 232, 100]
A[0] -> @A + offest 0 * 2
A[1] -> @A + offset 1 * 2 => 100 + 1 * 2
offest = base addr * size of data in bucket
          128 64 32 16 8 4 2 1
00000000   0  1   1  1 1 0 1 1
```

```
[
0x100: 00000000
0x101: 01111011
0x102:
0x103:
...
...
...
0x123: "H
0x124   e
0x125   l
0x126   l
0x127]  o"
```
```python=
a = [("bob", (1, 2, 3, "dave"), [{"bob": [1, 2, "Hello"]}], (123, 22)), (2.7), "bob"]
a[0][1][3][1]
[] -> () -> 1 2 3
```

()

1

2

3

# **CODE**: 3672
"""

[12, 23, 34, 44]

"""# Demo

[1, 2, 3]
H T U   U
1 2 3 + 8

TH H T U   U
1, 0 0 0 + 1
if number 9 change it to zero
move to the next power of ten
repeat


"""

"""
You are given a non-empty array that represents the digits of a non-negative integer.
Write a function that increments the number by 1.
The digits are stored so that the digit representing the most significant place value 
is at the beginning of the array. Each element in the array only contains a single digit.
You will not receive a leading 0 in your input array (except for the number 0 itself).
Example 1:
Input: [1,3,2]
Output: [1,3,3]
Explanation: The input array represents the integer 132. 132 + 1 = 133.
Example 2:
Input: [3,2,1,9]
Output: [3,2,2,0]
Explanation: The input array represents the integer 3219. 3219 + 1 = 3220.
Example 3:
Input: [9,9,9]
Output: [1,0,0,0]
Explanation: The input array represents the integer 999. 999 + 1 = 1000.
  
[0, 0, 0]

n = 3
idx = 3 - 1 - 2
"""


def plus_one(digits):
    # Your code here
    n = len(digits)
    # iterate over the list from right to left
    for i in range(n - 1, -1, -1):
        # idx = n - 1 - i
        idx = i
        # if the current digit is a 9 then set it to a 0
        if digits[idx] == 9:
            digits[idx] = 0
        # otherwise increment the current digit and return digits
        else:
            digits[idx] += 1
            return digits

    # return digits we only get here if the list was all 9's
    return [1] + digits


print(plus_one([1, 3, 2]))  # [1, 3, 3]
print(plus_one([3, 2, 1, 9]))  # [3, 2, 2, 0]
print(plus_one([9, 9, 9]))  # [1, 0, 0, 0]

"""# **CODE**: 3672"""
